In hw5/answers/problem2.txt, write a brief description (one to two sentences for each operation) of 
why you included the operations you did and why you feel they are a sufficient interface to a graph. 
If your design includes multiple classes or interfaces, explain why you included each one; if not, 
explain whether you considered additional classes and why you decided not to include them. So your 
total work in this problem is this brief write-up plus the Javadoc class and method specifications 
as they appear in the source code you submit in Problem 4; you do not need to submit your Javadoc 
in a separate file.

addEdge: It is necessary for client to add edges in the graph. There are two overloading functions which 
		 allow the user to add edges in both ways.

addNode: It is necessary for client to add nodes in the graph. There are two overloading functions which 
		 allow the user to add nodes in both ways.

contains: It allows clients to know whether an edge or a node is in the graph and helps them to have a good
		 idea of details of the graph. It also prevents clients from adding duplicate edges or nodes.
		 
listEnds: It allows clients to know all the nodes that the node client given points to. This function helps
	     clients to search for path in the graph.
	    
removeEdge: This function allows clients to remove an edge to modify the graph.

removeNode: This function allows clients to remove a node to modify the graph.

toString: This function gives a string representation of the graph. It allows user to print the graph.

Node class: I create this class to clearly represent the concept of node in a graph and It allows further 
		    modification to adjust to the demand of clients. For example, if the client often remove nodes, 
		    we can add a new field in the node class to store all the nodes that point to it. Then it is 
		    more efficient to remove all the edges that point to the node if we want to remove it.
		  
Edge class: I create this class to represent the edges of the graph. The Edge class store the necessary 
		    information about the relationship between nodes.

